#include "hsmrs_implementations/FollowTagTask.h"
#include "ros/console.h"

const int FollowTagTask::MIN_OWNERS = 1;
const int FollowTagTask::MAX_OWNERS = 1;

FollowTagTask::FollowTagTask(){
	tagID = 0;
	//attributeWeights;
	priority = 0.0;
	id = -1; //unknown
	prerequisite = new MyPrerequisite();
	progress = new MyProgress();
}

FollowTagTask::FollowTagTask(hsmrs_framework::TaskMsg::ConstPtr& msg){

}

FollowTagTask::FollowTagTask(std::string strDelimitedTask){
	// ID;Name;[ParamName:ParamType=ParamValue, ...];[SubTask1, SubTask2, ...];[Owner1, Owner2, ...]
	priority = 0.0;
	std::vector<std::string> items;

	std::string delimiter = ";";
	size_t pos = 0;

	while ((pos = strDelimitedTask.find(delimiter)) != std::string::npos) {
    	items.push_back(strDelimitedTask.substr(0, pos));
    	strDelimitedTask.erase(0, pos + delimiter.length());
	}
	items.push_back(strDelimitedTask);

    id = std::stoi(items[0]);
	std::string paramList = items[2];

    std::vector<std::string> items2;
	paramList.erase(0, 1);    
	paramList.erase(paramList.size() - 1);

    delimiter = ",";
	pos = 0;

	while ((pos = paramList.find(delimiter)) != std::string::npos) {
    	items2.push_back(paramList.substr(0, pos));
    	paramList.erase(0, pos + delimiter.length());
	}
	items2.push_back(paramList);

	std::vector<std::string> items3;
	delimiter = "=";
	pos = 0;

	while ((pos = items2[0].find(delimiter)) != std::string::npos) {
    	items3.push_back(items2[0].substr(0, pos));
    	items2[0].erase(0, pos + delimiter.length());
	}
	items3.push_back(items2[0]);

    tagID = std::stoi(items3[1]);

    std::string ownerList = items[4];
    ownerList.erase(0, 1);
    ownerList.erase(ownerList.size() - 1);

    std::vector<std::string> items5;
    delimiter = ",";
	pos = 0;

	while ((pos = ownerList.find(delimiter)) != std::string::npos) {
    	owners.push_back(ownerList.substr(0, pos));
    	ownerList.erase(0, pos + delimiter.length());
	}
	owners.push_back(ownerList);

    prerequisite = new MyPrerequisite();
	progress = new MyProgress();
}

std::string FollowTagTask::getType(){
	return "FollowTagTask";
}

int FollowTagTask::getTagID(){
	return tagID;
}

	/**
	 * Retrieves a vector of Agents who have claimed this Task
	 * @return A vector of Agents who have claimed this Task
	 */
 std::vector<std::string> FollowTagTask::getOwners(){
	return owners;
}

	/**
	 * Determines the minimum number of Agents that need to claim this
	 * Task for the Task to be executed.
	 * @return The minimum number of owners for this Task.
	 */
 int FollowTagTask::getMinOwners(){
	return MIN_OWNERS;
}

	/**
	 * Determines the maximum number of Agents that can claim this
	 * Task.
	 * @return The maximum number of owners for this task.
	 */
 int FollowTagTask::getMaxOwners(){
	return MAX_OWNERS;
}

	/**
	 * Retrieves a mapping between Attributes and their weights.
	 * @return A map of strings and doubles
	 */
 std::map<std::string, double>* FollowTagTask::getAttributeWeights(){
	return &attributeWeights;
}

	/**
	 * Retrieves a vector of subtasks which need to be completed as part of
	 * this task
	 * @return A vector of Tasks which are a part of this Task.
	 */
 std::vector<Task*> FollowTagTask::getSubtasks(){
	return std::vector<Task*>(subTasks);
}

	/**
	 * Adds an Agent as an owner to this task, if another owner can be added
	 * @param agent The Agent to be added as an owner.
	 */
 void FollowTagTask::addOwner(std::string agent){
	owners.push_back(agent);
}

	/**
	 * Removes the given Agent as an owner.
	 * @param agent The name of the Agent to be removed as an owner.
	 */
 void FollowTagTask::removeOwner(std::string name){
	 std::vector<std::string>::iterator result = find(owners.begin(), owners.end(), name);

    if (result != owners.end()) owners.erase(result);        
}

 double FollowTagTask::getPriority(){
	return priority;
}

 void FollowTagTask::setPriority(double p){
	priority = p;
}

 bool FollowTagTask::isReady(){
	return prerequisite->isFulfilled();
}

 int FollowTagTask::getID(){
	return id;
}

 void FollowTagTask::setProgress(double val){
	//progress->set(val);
}
